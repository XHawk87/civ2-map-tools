{"version":3,"sources":["tools/TerrainType.ts","tools/ImageUtils.ts","components/MapRenderer.tsx","tools/MapTile.ts","tools/MapData.ts","components/MapSaver.tsx","screens/Waterways.tsx"],"names":["TerrainType","loadImage","src","Promise","resolve","reject","image","Image","onload","onerror","MapRenderer","props","canvasRef","useRef","map","mapData","tileWidth","tileHeight","useEffect","a","canvas","current","context","getContext","terrain1","terrain2","fillStyle","fillRect","width","height","y","x","tile","getTile","xPos","yPos","drawImage","terrainType","valueOf","tileNE","tileSE","tileSW","tileNW","terrainNE","terrainSE","terrainSW","terrainNW","terrainDx","terrainDy","FOREST","MOUNTAINS","HILLS","river","riverNE","isWater","riverSE","riverSW","riverNW","riverDx","riverDy","finally","canvasWidth","canvasHeight","ref","MapTile","tileData","tileOffset","this","DataView","buffer","getUint8","terrainBits","value","DESERT","PLAINS","GRASSLAND","TUNDRA","GLACIER","MARSH","JUNGLE","WATER","UNKNOWN_B","UNKNOWN_C","UNKNOWN_D","UNKNOWN_E","UNKNOWN_F","terrainTypeLookup","terrainTypeBits","setUint8","source","offset","byteLength","MapData","arrayBuffer","fileName","dateFormat","Date","now","getUint16","area","flat","slice","blob","Blob","Uint8Array","byteOffset","saveAs","MapSaver","saveClicked","onClick","Waterways","fileInputRef","loadFile","file","then","name","replace","ReactDOM","render","document","getElementById","className","to","FileDrop","onFrameDrop","event","dataTransfer","files","item","onTargetClick","click","onChange","target","type","id"],"mappings":"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","file":"static/js/5.26de3467.chunk.js","sourcesContent":["export enum TerrainType {\n    DESERT = 0x00,\n    PLAINS = 0x01,\n    GRASSLAND = 0x02,\n    FOREST = 0x03,\n    HILLS = 0x04,\n    MOUNTAINS = 0x05,\n    TUNDRA = 0x06,\n    GLACIER = 0x07,\n    MARSH = 0x08,\n    JUNGLE = 0x09,\n    WATER = 0x0A,\n    UNKNOWN_B = 0x0B,\n    UNKNOWN_C = 0x0C,\n    UNKNOWN_D = 0x0D,\n    UNKNOWN_E = 0x0E,\n    UNKNOWN_F = 0x0F,\n}\n\nexport const terrainTypeLookup = (value: number) => {\n    switch (value) {\n        case 0x00:\n            return TerrainType.DESERT;\n        case 0x01:\n            return TerrainType.PLAINS;\n        case 0x02:\n            return TerrainType.GRASSLAND;\n        case 0x03:\n            return TerrainType.FOREST;\n        case 0x04:\n            return TerrainType.HILLS;\n        case 0x05:\n            return TerrainType.MOUNTAINS;\n        case 0x06:\n            return TerrainType.TUNDRA;\n        case 0x07:\n            return TerrainType.GLACIER;\n        case 0x08:\n            return TerrainType.MARSH;\n        case 0x09:\n            return TerrainType.JUNGLE;\n        case 0x0A:\n            return TerrainType.WATER;\n        case 0x0B:\n            return TerrainType.UNKNOWN_B;\n        case 0x0C:\n            return TerrainType.UNKNOWN_C;\n        case 0x0D:\n            return TerrainType.UNKNOWN_D;\n        case 0x0E:\n            return TerrainType.UNKNOWN_E;\n        case 0x0F:\n            return TerrainType.UNKNOWN_F;\n        default:\n            return TerrainType.DESERT;\n    }\n};","export function loadImage(src: string) {\n    return new Promise<CanvasImageSource>((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n        return image;\n    });\n}","import React, {LegacyRef, useEffect, useRef} from 'react';\nimport {MapData} from \"../tools/MapData\";\nimport {TerrainType} from \"../tools/TerrainType\";\nimport {MapTile} from \"../tools/MapTile\";\nimport {loadImage} from \"../tools/ImageUtils\";\n\ninterface MapRendererProps {\n    mapData: MapData;\n    tileWidth?: number;\n    tileHeight?: number;\n}\n\nexport default function MapRenderer(props: MapRendererProps) {\n    const canvasRef: LegacyRef<HTMLCanvasElement> = useRef(null);\n    const map = props.mapData;\n    const tileWidth = props.tileWidth ?? 16;\n    const tileHeight = props.tileHeight ?? 8;\n    useEffect(() => {\n        (async () => {\n            const canvas = canvasRef.current;\n            if (!canvas) return;\n            const context = canvas.getContext('2d');\n            if (!context) return;\n            const terrain1 = await loadImage('/map-renderer/TERRAIN1.png');\n            const terrain2 = await loadImage('/map-renderer/TERRAIN2.png');\n            context.fillStyle = '#000000';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n            for (let y = 0; y < map.height; y += 1) {\n                for (let x = 0; x < map.width; x += 1) {\n                    const tile = map.getTile(x, y) as MapTile;\n                    const xPos = x * tileWidth + (y % 2) * (tileWidth / 2);\n                    const yPos = y * tileHeight / 2;\n                    context.drawImage(terrain1, 1, 1 + 33 * tile.terrainType.valueOf(), 64, 32,\n                        xPos, yPos, tileWidth, tileHeight);\n                    const tileNE = map.getTile(x + (y % 2), y - 1);\n                    const tileSE = map.getTile(x + (y % 2), y + 1);\n                    const tileSW = map.getTile(x + (y % 2) - 1, y + 1);\n                    const tileNW = map.getTile(x + (y % 2) - 1, y - 1);\n                    const terrainNE = tileNE?.terrainType === tile.terrainType ? 1 : 0;\n                    const terrainSE = tileSE?.terrainType === tile.terrainType ? 2 : 0;\n                    const terrainSW = tileSW?.terrainType === tile.terrainType ? 4 : 0;\n                    const terrainNW = tileNW?.terrainType === tile.terrainType ? 1 : 0;\n                    const terrainDx = 1 + (terrainNE + terrainSW + terrainSE) * 65;\n                    const terrainDy = terrainNW * 33;\n                    if (tile.terrainType === TerrainType.FOREST) {\n                        context.drawImage(terrain2, terrainDx, terrainDy + 133, 64, 32,\n                            xPos, yPos, tileWidth, tileHeight);\n                    } else if (tile.terrainType === TerrainType.MOUNTAINS) {\n                        context.drawImage(terrain2, terrainDx, terrainDy + 199, 64, 32,\n                            xPos, yPos, tileWidth, tileHeight);\n                    } else if (tile.terrainType === TerrainType.HILLS) {\n                        context.drawImage(terrain2, terrainDx, terrainDy + 265, 64, 32,\n                            xPos, yPos, tileWidth, tileHeight);\n                    }\n                    if (tile.river) {\n                        const riverNE = (tileNE?.river || tileNE?.isWater()) ? 1 : 0;\n                        const riverSE = (tileSE?.river || tileSE?.isWater()) ? 2 : 0;\n                        const riverSW = (tileSW?.river || tileSW?.isWater()) ? 4 : 0;\n                        const riverNW = (tileNW?.river || tileNW?.isWater()) ? 1 : 0;\n                        const riverDx = 1 + (riverNE + riverSW + riverSE) * 65;\n                        const riverDy = riverNW * 33;\n                        context.drawImage(terrain2, riverDx, riverDy + 67, 64, 32,\n                            xPos, yPos, tileWidth, tileHeight);\n                    }\n                }\n            }\n        })().finally();\n    }, [map, tileHeight, tileWidth]);\n    const canvasWidth = (map.width + 0.5) * tileWidth;\n    const canvasHeight = (map.height + 1) * tileHeight / 2;\n    return (\n        <section>\n            <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}/>\n        </section>\n    );\n}\n","import {MapData} from \"./MapData\";\nimport {TerrainType, terrainTypeLookup} from \"./TerrainType\";\n\nexport class MapTile {\n    private tileData: DataView;\n\n    constructor(mapData: MapData, x: number, y: number) {\n        const tileOffset = 0x62 + (x * 6) + (y * 6 * mapData.width);\n        this.tileData = new DataView(mapData.buffer, tileOffset, 6);\n    }\n\n    private get terrainBits() {\n        return this.tileData.getUint8(0);\n    }\n\n    private get terrainTypeBits() {\n        return this.terrainBits & 0x0F;\n    }\n\n    get terrainType() {\n        return terrainTypeLookup(this.terrainTypeBits);\n    }\n\n    set terrainType(terrainType: TerrainType) {\n        this.tileData.setUint8(0, (this.terrainBits & 0xF0) + (terrainType.valueOf() & 0x0F));\n    }\n\n    isWater() {\n        return this.terrainType === TerrainType.WATER;\n    }\n\n    get river() {\n        return (this.tileData.getUint8(0) & 0x80) === 0x80;\n    }\n\n    set river(river: boolean) {\n        if (river === this.river) return;\n        this.tileData.setUint8(0, this.tileData.getUint8(0) ^ 0x80);\n    }\n\n    copyTile(source: MapTile) {\n        for (let offset = 0; offset < this.tileData.byteLength; offset += 1) {\n            this.tileData.setUint8(offset, source.tileData.getUint8(offset));\n        }\n    }\n}","import {saveAs} from 'file-saver';\nimport {MapTile} from \"./MapTile\";\nimport dateFormat from 'dateformat';\n\nexport class MapData {\n    private mapData: DataView;\n    readonly fileName: string;\n\n    constructor(arrayBuffer: ArrayBuffer, fileName?: string) {\n        this.mapData = new DataView(arrayBuffer);\n        this.fileName = fileName ?? dateFormat(Date.now(), 'yyyy-mm-dd_HH-MM-ss') + \".mp\";\n    }\n\n    get buffer() {\n        return this.mapData.buffer;\n    }\n\n    get height() {\n        return this.mapData.getUint8(0x02);\n    }\n\n    get area() {\n        return this.mapData.getUint16(0x04, true);\n    }\n\n    get width() {\n        return this.area / this.height;\n    }\n\n    get flat() {\n        return (this.mapData.getUint8(0x06) & 0x01) === 0x01;\n    }\n\n    set flat(flat: boolean) {\n        if (flat === this.flat) return;\n        this.mapData.setUint8(0x06, this.mapData.getUint8(0x06) ^ 0x01);\n    }\n\n    isRound() {\n        return !this.flat;\n    }\n\n    getTile(x: number, y: number) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) return null;\n        return new MapTile(this, x, y);\n    }\n\n    copy() {\n        return new MapData(this.mapData.buffer.slice(0));\n    }\n\n    saveAs(fileName: string) {\n        const blob = new Blob([new Uint8Array(this.mapData.buffer, this.mapData.byteOffset, this.mapData.byteLength)]);\n        saveAs(blob, fileName)\n    }\n}","import React from \"react\";\nimport {MapData} from \"../tools/MapData\";\n\ninterface MapSaverProps {\n    mapData: MapData;\n}\n\nexport default function MapSaver(props: MapSaverProps) {\n    const map = props.mapData;\n    const saveClicked = async () => {\n        map.saveAs(map.fileName);\n    };\n    return (\n        <div>\n            <button onClick={saveClicked}>Save</button>\n        </div>\n    );\n}","import React, {ChangeEvent, LegacyRef, useRef} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {FileDrop} from \"react-file-drop\";\nimport ReactDOM from \"react-dom\";\nimport MapRenderer from \"../components/MapRenderer\";\nimport {MapData} from \"../tools/MapData\";\nimport {MapTile} from \"../tools/MapTile\";\nimport {TerrainType} from \"../tools/TerrainType\";\nimport MapSaver from \"../components/MapSaver\";\n\nexport default function Waterways() {\n    const fileInputRef: LegacyRef<HTMLInputElement> = useRef(null);\n    const loadFile = (file?: File | null | undefined) => {\n        if (!file) return;\n        file.arrayBuffer().then(arrayBuffer => {\n            const fileName = file.name.replace(/\\..*?^/, \"\") + \"-WATERWAYS.MP\";\n            const map = new MapData(arrayBuffer, fileName);\n            for (let x = 0; x < map.width; x += 1) {\n                for (let y = 0; y < map.height; y += 1) {\n                    const tile = map.getTile(x, y) as MapTile;\n                    const isLand = (y % 2 === 0) || (y === map.height - 1) || ((x === map.width - 1) && map.flat);\n                    if (isLand) {\n                        if (tile.isWater()) {\n                            tile.terrainType = TerrainType.MOUNTAINS;\n                        }\n                    } else {\n                        tile.terrainType = TerrainType.WATER;\n                    }\n                }\n            }\n            ReactDOM.render(<MapRenderer mapData={map}/>,\n                document.getElementById('map-renderer-container'));\n            ReactDOM.render(<MapSaver mapData={map}/>,\n                document.getElementById('map-saver-container'));\n        });\n    };\n    const onFileInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        loadFile(event.target.files?.item(0));\n    };\n    const onFrameDrop = (event: DragEvent) => {\n        loadFile(event.dataTransfer?.files.item(0));\n    };\n    const onTargetClick = () => {\n        fileInputRef.current?.click();\n    };\n    return (\n        <div className=\"App-header\">\n            <Link to=\"/\">Home</Link>\n            <h2>Convert Map to Waterways</h2>\n            <FileDrop onFrameDrop={onFrameDrop} onTargetClick={onTargetClick}>\n                <p>Drag and drop or select a Civ 2 Map file</p>\n                <div>\n                    <input onChange={onFileInputChange} ref={fileInputRef} type=\"file\" className=\"file-drop-select\"/>\n                    <div id=\"map-saver-container\"/>\n                </div>\n            </FileDrop>\n            <div id=\"map-renderer-container\"/>\n        </div>\n    );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["tools/TerrainType.ts","tools/ImageUtils.ts","components/MapRenderer.tsx","tools/map/MapTile.ts","tools/map/MapData.ts","components/MapSaver.tsx","components/Waterways.tsx","components/FloodWithRivers.tsx","screens/MapEditor.tsx"],"names":["TerrainType","loadImage","src","Promise","resolve","reject","image","Image","onload","onerror","MapRenderer","props","canvasRef","useRef","map","tileWidth","tileHeight","useEffect","a","canvas","current","context","getContext","terrain1","terrain2","fillStyle","fillRect","width","height","y","x","tile","getTile","xPos","yPos","drawImage","terrainType","valueOf","tileNE","tileSE","tileSW","tileNW","terrainNE","terrainSE","terrainSW","terrainNW","terrainDx","terrainDy","FOREST","MOUNTAINS","HILLS","river","riverNE","isWater","riverSE","riverSW","riverNW","riverDx","riverDy","callbackFn","canvasWidth","canvasHeight","ref","MapTile","tileData","tileOffset","this","DataView","mapData","buffer","getUint8","terrainBits","value","DESERT","PLAINS","GRASSLAND","TUNDRA","GLACIER","MARSH","JUNGLE","WATER","UNKNOWN_B","UNKNOWN_C","UNKNOWN_D","UNKNOWN_E","UNKNOWN_F","terrainTypeLookup","terrainTypeBits","getTerrainType","hasRiver","ModifiableMapTile","setUint8","MapData","arrayBuffer","fileName","getUint16","area","isFlat","doModifications","newMap","slice","ModifiableMapData","byteLength","byteOffset","blob","Blob","Uint8Array","saveAs","flat","oldValue","newValue","MapSaver","fileNameRef","defaultValue","onClick","Waterways","setMap","withModifications","newTile","FloodWithRivers","isLand","MapEditor","useState","fileInputRef","loadFile","file","name","onFileInputChange","event","target","files","item","finally","onFrameDrop","dataTransfer","onTargetClick","click","className","to","FileDrop","onChange","type"],"mappings":"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","file":"static/js/4.d88ad9fd.chunk.js","sourcesContent":["export enum TerrainType {\n    DESERT = 0x00,\n    PLAINS = 0x01,\n    GRASSLAND = 0x02,\n    FOREST = 0x03,\n    HILLS = 0x04,\n    MOUNTAINS = 0x05,\n    TUNDRA = 0x06,\n    GLACIER = 0x07,\n    MARSH = 0x08,\n    JUNGLE = 0x09,\n    WATER = 0x0A,\n    UNKNOWN_B = 0x0B,\n    UNKNOWN_C = 0x0C,\n    UNKNOWN_D = 0x0D,\n    UNKNOWN_E = 0x0E,\n    UNKNOWN_F = 0x0F,\n}\n\nexport const terrainTypeLookup = (value: number) => {\n    switch (value) {\n        case 0x00:\n            return TerrainType.DESERT;\n        case 0x01:\n            return TerrainType.PLAINS;\n        case 0x02:\n            return TerrainType.GRASSLAND;\n        case 0x03:\n            return TerrainType.FOREST;\n        case 0x04:\n            return TerrainType.HILLS;\n        case 0x05:\n            return TerrainType.MOUNTAINS;\n        case 0x06:\n            return TerrainType.TUNDRA;\n        case 0x07:\n            return TerrainType.GLACIER;\n        case 0x08:\n            return TerrainType.MARSH;\n        case 0x09:\n            return TerrainType.JUNGLE;\n        case 0x0A:\n            return TerrainType.WATER;\n        case 0x0B:\n            return TerrainType.UNKNOWN_B;\n        case 0x0C:\n            return TerrainType.UNKNOWN_C;\n        case 0x0D:\n            return TerrainType.UNKNOWN_D;\n        case 0x0E:\n            return TerrainType.UNKNOWN_E;\n        case 0x0F:\n            return TerrainType.UNKNOWN_F;\n        default:\n            return TerrainType.DESERT;\n    }\n};","export function loadImage(src: string) {\n    return new Promise<CanvasImageSource>((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n        return image;\n    });\n}","import React, {LegacyRef, useEffect, useRef} from 'react';\nimport {MapData} from \"../tools/map/MapData\";\nimport {TerrainType} from \"../tools/TerrainType\";\nimport {loadImage} from \"../tools/ImageUtils\";\nimport {MapTile} from \"../tools/map/MapTile\";\n\ninterface MapRendererProps {\n    map: MapData;\n    tileWidth?: number;\n    tileHeight?: number;\n}\n\nfunction exec(callbackFn: () => any) {\n    callbackFn();\n}\n\nexport default function MapRenderer(props: MapRendererProps) {\n    const canvasRef: LegacyRef<HTMLCanvasElement> = useRef(null);\n    const map = props.map;\n    const tileWidth = props.tileWidth ?? 16;\n    const tileHeight = props.tileHeight ?? 8;\n    useEffect(() => exec(async () => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const context = canvas.getContext('2d');\n        if (!context) return;\n        const terrain1 = await loadImage('/civ2-map-tools/map-renderer/TERRAIN1.png');\n        const terrain2 = await loadImage('/civ2-map-tools/map-renderer/TERRAIN2.png');\n        context.fillStyle = '#000000';\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n        for (let y = 0; y < map.height; y += 1) {\n            for (let x = 0; x < map.width; x += 1) {\n                const tile = map.getTile(x, y) as MapTile;\n                const xPos = x * tileWidth + (y % 2) * (tileWidth / 2);\n                const yPos = y * tileHeight / 2;\n                context.drawImage(terrain1, 1, 1 + 33 * tile.terrainType.valueOf(), 64, 32,\n                    xPos, yPos, tileWidth, tileHeight);\n                const tileNE = map.getTile(x + (y % 2), y - 1);\n                const tileSE = map.getTile(x + (y % 2), y + 1);\n                const tileSW = map.getTile(x + (y % 2) - 1, y + 1);\n                const tileNW = map.getTile(x + (y % 2) - 1, y - 1);\n                const terrainNE = tileNE?.terrainType === tile.terrainType ? 1 : 0;\n                const terrainSE = tileSE?.terrainType === tile.terrainType ? 2 : 0;\n                const terrainSW = tileSW?.terrainType === tile.terrainType ? 4 : 0;\n                const terrainNW = tileNW?.terrainType === tile.terrainType ? 1 : 0;\n                const terrainDx = 1 + (terrainNE + terrainSW + terrainSE) * 65;\n                const terrainDy = terrainNW * 33;\n                if (tile.terrainType === TerrainType.FOREST) {\n                    context.drawImage(terrain2, terrainDx, terrainDy + 133, 64, 32,\n                        xPos, yPos, tileWidth, tileHeight);\n                } else if (tile.terrainType === TerrainType.MOUNTAINS) {\n                    context.drawImage(terrain2, terrainDx, terrainDy + 199, 64, 32,\n                        xPos, yPos, tileWidth, tileHeight);\n                } else if (tile.terrainType === TerrainType.HILLS) {\n                    context.drawImage(terrain2, terrainDx, terrainDy + 265, 64, 32,\n                        xPos, yPos, tileWidth, tileHeight);\n                }\n                if (tile.river) {\n                    const riverNE = (tileNE?.river || tileNE?.isWater()) ? 1 : 0;\n                    const riverSE = (tileSE?.river || tileSE?.isWater()) ? 2 : 0;\n                    const riverSW = (tileSW?.river || tileSW?.isWater()) ? 4 : 0;\n                    const riverNW = (tileNW?.river || tileNW?.isWater()) ? 1 : 0;\n                    const riverDx = 1 + (riverNE + riverSW + riverSE) * 65;\n                    const riverDy = riverNW * 33;\n                    context.drawImage(terrain2, riverDx, riverDy + 67, 64, 32,\n                        xPos, yPos, tileWidth, tileHeight);\n                }\n            }\n        }\n    }), [map, tileHeight, tileWidth]);\n    const canvasWidth = (map.width + 0.5) * tileWidth;\n    const canvasHeight = (map.height + 1) * tileHeight / 2;\n    return (\n        <section>\n            <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}/>\n        </section>\n    );\n}\n","import {TerrainType, terrainTypeLookup} from \"../TerrainType\";\nimport {MapData} from \"./MapData\";\n\nexport class MapTile {\n    protected readonly tileData: DataView;\n    readonly x: number;\n    readonly y: number;\n\n    constructor(map: MapData, x: number, y: number) {\n        const tileOffset = 0x62 + (x * 6) + (y * 6 * map.width);\n        this.tileData = new DataView(map.mapData.buffer, tileOffset, 6);\n        this.x = x;\n        this.y = y;\n    }\n\n    get terrainBits() {\n        return this.tileData.getUint8(0);\n    }\n\n    get terrainTypeBits() {\n        return this.terrainBits & 0x0F;\n    }\n\n    getTerrainType() {\n        return terrainTypeLookup(this.terrainTypeBits);\n    }\n\n    get terrainType() {\n        return this.getTerrainType();\n    }\n\n    isWater() {\n        return this.terrainType === TerrainType.WATER;\n    }\n\n    isLand() {\n        return !this.isWater();\n    }\n\n    hasRiver() {\n        return (this.tileData.getUint8(0) & 0x80) === 0x80;\n    }\n\n    get river() {\n        return this.hasRiver();\n    }\n}\n\nexport class ModifiableMapTile extends MapTile {\n    get terrainType() {\n        return this.getTerrainType();\n    }\n\n    set terrainType(terrainType: TerrainType) {\n        this.tileData.setUint8(0, (this.terrainBits & 0xF0) + (terrainType.valueOf() & 0x0F));\n    }\n\n    get river() {\n        return this.hasRiver();\n    }\n\n    set river(river: boolean) {\n        if (river === this.river) return;\n        this.tileData.setUint8(0, this.tileData.getUint8(0) ^ 0x80);\n    }\n}\n","import {saveAs} from 'file-saver';\nimport {MapTile, ModifiableMapTile} from \"./MapTile\";\n\nexport class MapData {\n    readonly mapData: DataView;\n    readonly fileName: string;\n\n    constructor(arrayBuffer: ArrayBuffer, fileName: string) {\n        this.mapData = new DataView(arrayBuffer);\n        this.fileName = fileName;\n    }\n\n    get height() {\n        return this.mapData.getUint8(0x02);\n    }\n\n    get area() {\n        return this.mapData.getUint16(0x04, true);\n    }\n\n    get width() {\n        return this.area / this.height;\n    }\n\n    isFlat() {\n        return (this.mapData.getUint8(0x06) & 0x01) === 0x01;\n    }\n\n    isRound() {\n        return !this.isFlat();\n    }\n\n    get flat() {\n        return this.isFlat();\n    }\n\n    withModifications(doModifications: (newMap: ModifiableMapData) => void): MapData {\n        const newMap = new MapData(this.mapData.buffer.slice(0), this.fileName);\n        const modifiableMap = new ModifiableMapData(newMap.mapData.buffer, newMap.fileName);\n        doModifications(modifiableMap);\n        return newMap;\n    }\n\n    getTile(x: number, y: number) {\n        if (x < 0 || x >= this.width || y < 0 || y >= this.height) return null;\n        return new MapTile(this, x, y);\n    }\n\n    saveAs(fileName: string) {\n        const {buffer, byteLength, byteOffset} = this.mapData;\n        const blob = new Blob([new Uint8Array(buffer, byteOffset, byteLength)]);\n        saveAs(blob, fileName);\n    }\n}\n\nclass ModifiableMapData extends MapData {\n    get flat() {\n        return this.isFlat();\n    }\n\n    set flat(flat: boolean) {\n        const oldValue = this.mapData.getUint8(0x06);\n        const newValue = flat ? oldValue & 0xFE : oldValue | 0x01;\n        this.mapData.setUint8(0x06, newValue);\n    }\n\n    getTile(x: number, y: number): ModifiableMapTile {\n        return new ModifiableMapTile(this, x, y);\n    }\n}\n","import React, {useRef} from \"react\";\nimport {MapData} from \"../tools/map/MapData\";\n\ninterface MapSaverProps {\n    map: MapData;\n}\n\nexport default function MapSaver(props: MapSaverProps) {\n    const map = props.map;\n    const fileNameRef = useRef<HTMLInputElement>(null);\n    const saveClicked = () => {\n        const fileName = fileNameRef.current?.value;\n        if (fileName) map.saveAs(fileName);\n    };\n    return (\n        <div>\n            <input defaultValue={map.fileName} ref={fileNameRef}/>\n            <button onClick={saveClicked}>Save</button>\n        </div>\n    );\n}","import {TerrainType} from \"../tools/TerrainType\";\nimport {MapData} from \"../tools/map/MapData\";\n\ninterface WaterwaysProps {\n    map: MapData,\n    setMap: (map: MapData) => void;\n}\n\nexport default function Waterways(props: WaterwaysProps) {\n    const {map, setMap} = props;\n    const apply = () => setMap(map.withModifications((newMap) => {\n        for (let x = 0; x < newMap.width; x += 1) {\n            for (let y = 0; y < newMap.height; y += 1) {\n                const newTile = newMap.getTile(x, y);\n                const isLand = (y % 2 === 0) || (y === newMap.height - 1) || ((x === newMap.width - 1) && newMap.flat);\n                if (isLand) {\n                    if (newTile.isWater()) {\n                        newTile.terrainType = TerrainType.MOUNTAINS;\n                    }\n                } else {\n                    newTile.terrainType = TerrainType.WATER;\n                }\n            }\n        }\n    }));\n    return (\n        <button onClick={apply}>Convert to Waterways</button>\n    );\n}","import {MapData} from \"../tools/map/MapData\";\n\ninterface FloodWithRiversProps {\n    map: MapData,\n    setMap: (map: MapData) => void;\n}\n\nexport default function FloodWithRivers(props: FloodWithRiversProps) {\n    const {map, setMap} = props;\n    const apply = () => setMap(map.withModifications((newMap) => {\n        for (let x = 0; x < newMap.width; x += 1) {\n            for (let y = 0; y < newMap.height; y += 1) {\n                const newTile = newMap.getTile(x, y);\n                if (newTile.isLand()) {\n                    newTile.river = true;\n                }\n            }\n        }\n    }));\n    return (\n        <button onClick={apply}>Flood with Rivers</button>\n    );\n}","import React, {ChangeEvent, useRef, useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {FileDrop} from \"react-file-drop\";\nimport MapRenderer from \"../components/MapRenderer\";\nimport {MapData} from \"../tools/map/MapData\";\nimport MapSaver from \"../components/MapSaver\";\nimport Waterways from \"../components/Waterways\";\nimport FloodWithRivers from \"../components/FloodWithRivers\";\n\nexport default function MapEditor() {\n    const [map, setMap] = useState<MapData | null>(null);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    const loadFile = async (file: File) => {\n        const arrayBuffer = await file.arrayBuffer();\n        setMap(new MapData(arrayBuffer, file.name));\n    };\n    const onFileInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.item(0);\n        if (file) loadFile(file).finally();\n    };\n    const onFrameDrop = (event: DragEvent) => {\n        const file = event.dataTransfer?.files.item(0);\n        if (file) loadFile(file).finally();\n    };\n    const onTargetClick = () => {\n        fileInputRef.current?.click();\n    };\n\n    if (map) {\n        return (\n            <div className=\"App-header\">\n                <Link to=\"/\">Home</Link>\n                <h2>Civ 2 Map Editor</h2>\n                <FileDrop onFrameDrop={onFrameDrop} onTargetClick={onTargetClick}>\n                    <p>Drag and drop or select a new Civ 2 Map file to change which map you are editing</p>\n                    <div>\n                        <input onChange={onFileInputChange} ref={fileInputRef} type=\"file\"\n                               className=\"file-drop-select\"/>\n                    </div>\n                </FileDrop>\n                <MapSaver map={map}/>\n                <MapRenderer map={map}/>\n                <div className=\"macro-buttons\">\n                    <Waterways map={map} setMap={setMap}/>\n                    <FloodWithRivers map={map} setMap={setMap}/>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"App-header\">\n                <Link to=\"/\">Home</Link>\n                <h2>Civ 2 Map Editor</h2>\n                <FileDrop onFrameDrop={onFrameDrop} onTargetClick={onTargetClick}>\n                    <p>Drag and drop or select a Civ 2 Map file</p>\n                    <div>\n                        <input onChange={onFileInputChange} ref={fileInputRef} type=\"file\"\n                               className=\"file-drop-select\"/>\n                    </div>\n                </FileDrop>\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}